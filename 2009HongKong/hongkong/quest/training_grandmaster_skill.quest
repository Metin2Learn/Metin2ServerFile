quest training_grandmaster_skill begin
    state start begin
	when 50513.use begin
	    say_title("修練[最高等級]技能")

	    if pc.get_skill_group() == 0 then
		say("你沒有任何職業."..pc.get_skill_group())
		return
	    end

	    if get_time() < pc.getqf("next_time") then -- and not is_test_server() then
		if pc.is_skill_book_no_delay() then
		    say("已經修練咒安秘笈的緣故, 不必休息")
		    say("馬上可以再修練.")
		    say("")
		    wait()
		    say_title("修練[最高等級]技能")
		else
		    say("修練之後大概半天的休息時間.")
		    return
		end
	    end

	    local result = training_grandmaster_skill.BuildGrandMasterSkillList(pc.get_job(), pc.get_skill_group())

	    local vnum_list = result[1]
	    local name_list = result[2]

	    if table.getn(vnum_list) == 0 then
		say("沒有技能正在修練[最高等級]")
		return
	    end

	    say("請選擇 [最高等級]修練技能")
	    say("")

	    local menu_list = {}
	    table.foreach(name_list, function(i, name) table.insert(menu_list, name) end)
	    table.insert(menu_list, "關閉") 

	    local s=select_table(menu_list)
	    if table.getn(menu_list) == s then
		return
	    end

	    local skill_name=name_list[s]
	    local skill_vnum=vnum_list[s]
	    local skill_level = pc.get_skill_level(skill_vnum)
	    local cur_alignment = pc.get_real_alignment()
	    local need_alignment = 1000+500*(skill_level-30)

	    test_chat("現在善惡值: "..cur_alignment)
	    test_chat("需要善惡值: "..need_alignment)

	    local title=string.format("%s 最高等級  %d 等級技能修練", skill_name, skill_level-30+1)

	    say_title(title)
	    say("在修練的時候, 比須消耗善惡值")
	    say("所以會下降到浪人. ")
	    say("")

	    if cur_alignment<-19000+need_alignment then
		say_reward("沒有剩下的善惡值, 所以無法再修練.")
		return
	    end

	    if cur_alignment<0 then
		say_reward(string.format("需要善惡值: %d -> %d", need_alignment, need_alignment*2))
		say_reward("(浪人以下的話, 善惡值消耗2倍)")
		need_alignment=need_alignment*2
	    elseif cur_alignment<need_alignment then
		say_reward(string.format("需要善惡值: %d", need_alignment))
		say_reward("(現在修練的話, 會下降到浪人以下.)")
	    else
		say_reward(string.format("需要善惡值: %d", need_alignment))
	    end
	    say("")

	    local s=select("進行", "保留")	
	    if s==2 then
		return
	    end


	    if cur_alignment>=0 and cur_alignment<need_alignment then
		say_title(string.format("%s 確定", title))
		say("如果現在開始修練[最高等級]的話你的善惡值不足")
		say("所以有可能會下降到浪人以下.")
		say("如果你真的想修練的話,")
		say("請輸入跟下面的句子.")
		say("")
		say_reward("我想開始修練")
		say("")
		say("如果不想修練的話, 請按下確定")
		local s=input()
		if s!="我想開始修練" then
		    return
		end
	    end

	    if get_time() < pc.getqf("next_time") then -- and not is_test_server() then
		if pc.is_skill_book_no_delay() then
		    pc.remove_skill_book_no_delay()
		else
		    say("[高級等級]技能修練錯誤: 休息中")
		    return
		end
	    end

	    pc.setqf("next_time", get_time()+time_hour_to_sec(number(8, 12)))

	    if need_alignment>0 then
		if pc.learn_grand_master_skill(skill_vnum) then
		    pc.change_alignment(-need_alignment)


		    say_title(string.format("%s 成功", title))
		    if 40 == pc.get_skill_level(skill_vnum) then
			say(string.format("%s [高級等級]修練成功.", skill_name))
		    else
			say(string.format("[高級等級]修練的 %s是 %d 等級.", skill_name, skill_level-30+1+1))
		    end
		    say("")
		    say_reward("技能等級上升成功了!")
		    say_reward(string.format("消耗善惡值 %d ", need_alignment))
		    say("")
		else
		    say_title(string.format("%s 失敗", title))
		    say("技能等級上升失敗.")
		    say("")
		    say_reward("丟了善惡值的一部分")
		    say("")
		    pc.change_alignment(-number(need_alignment/3, need_alignment/2))
		end
	    end

	    item.remove()
	end
	function BuildGrandMasterSkillList(job, group)
	    GRAND_MASTER_SKILL_LEVEL = 30
	    PERFECT_MASTER_SKILL_LEVEL = 40

	    local skill_list = special.active_skill_list[job+1][group]
	    local ret_vnum_list = {}
	    local ret_name_list = {}

	    -- test_chat(string.format("job=%d, group=%d", job, group))

	    table.foreach(skill_list, 
	    function(i, skill_vnum) 
		local skill_level = pc.get_skill_level(skill_vnum)

		-- test_chat(string.format("[%d]=%d", skill_vnum, skill_level))
		if skill_level >= GRAND_MASTER_SKILL_LEVEL and skill_level < PERFECT_MASTER_SKILL_LEVEL then

		    table.insert(ret_vnum_list, skill_vnum)
		    local name=locale.GM_SKILL_NAME_DICT[skill_vnum]
		    if name == nil then name=skill_vnum end
		    table.insert(ret_name_list, name)
		end
	    end)
	    return {ret_vnum_list, ret_name_list}


	    --return {ret_vnum_list, ret_name_list}
	end
    end
end

